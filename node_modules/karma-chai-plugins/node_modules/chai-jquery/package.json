{
  "author": {
    "name": "John Firebaugh",
    "email": "john.firebaugh@gmail.com"
  },
  "name": "chai-jquery",
  "description": "jQuery assertions for the Chai assertion library",
  "keywords": [
    "test",
    "assertion",
    "assert",
    "testing",
    "jQuery"
  ],
  "version": "1.2.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/chaijs/chai-jquery"
  },
  "bugs": {
    "url": "https://github.com/chaijs/chai-jquery/issues"
  },
  "scripts": {
    "test": "mocha-phantomjs test/index.html"
  },
  "main": "./chai-jquery",
  "engines": {
    "node": ">= 0.4.0"
  },
  "devDependencies": {
    "chai": "1",
    "mocha": "1",
    "mocha-phantomjs": "3",
    "jquery": "2.1.0"
  },
  "readme": "# chai-jquery\n\nchai-jquery is an extension to the [chai](http://chaijs.com/) assertion library that\nprovides a set of jQuery-specific assertions.\n\n## Usage\n\nInclude `chai-jquery.js` in your test file, after `chai.js` (version 1.0.0-rc1 or later):\n\n    <script src=\"chai-jquery.js\"></script>\n\nUse the assertions with chai's `expect` or `should` assertions.\n\n## Assertions\n\n### `attr(name[, value])`\nAssert that the first element of the selection has the given attribute, using [`.attr()`](http://api.jquery.com/attr/).\nOptionally, assert a particular value as well. The return value is available for chaining.\n\n    $('#header').should.have.attr('foo');\n    expect($('body')).to.have.attr('foo', 'bar');\n    expect($('body')).to.have.attr('foo').match(/bar/);\n\n### `prop(name[, value])`\nAssert that the first element of the selection has the given property, using [`.prop()`](http://api.jquery.com/prop/).\nOptionally, assert a particular value as well. The return value is available for chaining.\n\n    $('#header').should.have.prop('disabled');\n    expect($('body')).to.have.prop('disabled', false);\n    expect($('body')).to.have.prop('value').match(/bar/);\n\n### `css(name[, value])`\nAssert that the first element of the selection has the given CSS property, using [`.css()`](http://api.jquery.com/css/).\nOptionally, assert a particular value as well. The return value is available for chaining.\n\n    $('#header').should.have.css('background');\n    expect($('body')).to.have.css('background-color', '#ffffff');\n    expect($('body')).to.have.css('font-family').match(/sans-serif/);\n\n### `data(name[, value])`\nAssert that the first element of the selection has the given data value, using [`.data()`](http://api.jquery.com/data/).\nOptionally, assert a particular value as well. The return value is available for chaining.\n\n    $('#header').should.have.data('foo');\n    expect($('body')).to.have.data('foo', 'bar');\n    expect($('body')).to.have.data('foo').match(/bar/);\n\n### `class(className)`\nAssert that the first element of the selection has the given class, using [`.hasClass()`](http://api.jquery.com/hasClass/).\n\n    $('#header').should.have.class('foo');\n    expect($('body')).to.have.class('foo');\n\n### `id(id)`\nAssert that the first element of the selection has the given id, using `.attr('id')`.\n\n    $('.header').should.have.id('#main');\n    expect($('body')).to.have.id('foo');\n\n### `html(html)`\nAssert that the html of the first element of the selection is equal to the given html, using [`.html()`](http://api.jquery.com/html/).\n\n    $('.name').should.have.html('<em>John Doe</em>');\n    expect($('#title')).to.have.html('Chai Tea');\n\n### `text(text)`\nAssert that the text of the first element of the selection is equal to the given text, using [`.text()`](http://api.jquery.com/text/).\n\n    $('.name').should.have.text('John Doe');\n    expect($('#title')).to.have.text('Chai Tea');\n\n### `value(value)`\nAssert that the first element of the selection has the given value, using [`.val()`](http://api.jquery.com/val/).\n\n    $('.name').should.have.value('John Doe');\n    expect($('.year')).to.have.value('2012');\n\n### `visible`\nAssert that at least one element of the selection is visible, using [`.is(':visible')`](http://api.jquery.com/:visible/).\n\n    $('.name').should.be.visible;\n    expect($('.year')).to.be.visible;\n\n### `hidden`\nAssert that at least one element of the selection is hidden, using [`.is(':hidden')`](http://api.jquery.com/:hidden/).\n\n    $('.name').should.be.hidden;\n    expect($('.year')).to.be.hidden;\n\n### `selected`\nAssert that at least one element of the selection is selected, using [`.is(':selected')`](http://api.jquery.com/:selected/).\n\n    $('option').should.be.selected;\n    expect($('option')).not.to.be.selected;\n\n### `checked`\nAssert that at least one element of the selection is checked, using [`.is(':checked')`](http://api.jquery.com/:checked/).\n\n    $('.checked').should.be.checked;\n    expect($('input')).not.to.be.checked;\n\n### `enabled`\nAssert that at least one element of the selection is enabled, using [`.is(':enabled')`](http://api.jquery.com/:enabled/).\n\n    $('.enabled').should.be.enabled;\n    expect($('enabled')).to.be.enabled;\n\n### `disabled`\nAssert that at least one element of the selection is disabled, using [`.is(':disabled')`](http://api.jquery.com/:disabled/).\n\n    $('.disabled').should.be.disabled;\n    expect($('input')).not.to.be.disabled;\n\n### `empty`\nAssert that at least one element of the selection is empty, using [`.is(':empty')`](http://api.jquery.com/empty-selector/).\nIf the object asserted against is not a jQuery object, the original implementation will be called.\n\n    $('.empty').should.be.empty;\n    expect($('body')).not.to.be.empty;\n\n### `exist`\nAssert that the selection is not empty. Note that this overrides the built-in chai assertion. If the object asserted\nagainst is not a jQuery object, the original implementation will be called.\n\n    $('#exists').should.exist;\n    expect($('#nonexistent')).not.to.exist;\n\n### `match(selector)` / `be(selector)`\nAssert that the selection matches a given selector, using [`.is()`](http://api.jquery.com/is/). Note that the\nbuilt-in behavior of the `match` function and `be` property is preserved -- if the object asserted against is\nnot a jQuery object, or if `be` is not called as a function, the original implementation will be called. Otherwise,\n`match` and `be` are synonyms -- use whichever one reads better.\n\n    $('input').should.match('#foo');\n    expect($('#empty')).to.be(':empty');\n\n### `contain(text)`\nAssert that the selection contains the given text, using [`:contains()`](http://api.jquery.com/contains-selector/).\nIf the object asserted against is not a jQuery object, or if `contain` is not called as a function, the original\nimplementation will be called.\n\n    $('body').should.contain('text');\n    expect($('#content')).to.contain('text');\n\n### `have(selector)`\nAssert that the selection contains at least one element which has a descendant matching the given selector,\nusing [`.has()`](http://api.jquery.com/has/). If the object asserted against is not a jQuery object, or if `have`\nis not called as a function, the original implementation will be called.\n\n    $('body').should.have('h1');\n    expect($('#content')).to.have('div');\n\nNote that this assertion has the unfortunate side effect of causing assertions such as\n`expect(selection).to.have.length(2)` to fail. The technical cause is that the `have` property must be a function,\nand functions have a built-in `length` property that cannot be modified. As as workaround, write the assertion\nas `expect(selection).to.be.of.length(2)` instead.\n\n## Contributing\n\nTo run the test suite, run `npm install` (requires\n[Node.js](http://nodejs.org/) to be installed on your system), and open\n`test/index.html` in your web browser.\n\n## License\n\nCopyright (c) 2012 John Firebaugh\n\nMIT License (see the LICENSE file)\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/chaijs/chai-jquery",
  "_id": "chai-jquery@1.2.3",
  "dist": {
    "shasum": "4ea29c5a25b13ec4cd2f5ec298cb44164b5a70b7"
  },
  "_from": "chai-jquery@~1.2.0",
  "_resolved": "https://registry.npmjs.org/chai-jquery/-/chai-jquery-1.2.3.tgz"
}
